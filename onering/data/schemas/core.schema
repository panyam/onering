
/**
 * Onering representation of core typelib schemas.
 */
module onering.core {
    /**
     * Modules are the top level holders of either other modules or types.
     */
    record Module {
        fqn : string
        docs : string
        entries : list<ModuleEntry>
    }

    /**
     * A Module entry is either a type or another module.
     */
    union ModuleEntry {
        module : Module
        type : Type
    }

    union Type {
        literal_type : LiteralType
        alias_type : AliasType
        product_type : ProductType
        sum_type : SumType
        fun_type : FunType
        typeref : TypeRef
        typefun : TypeFun
        typeapp : TypeApp
    }

    record LiteralType {
        base : Type
        fqn : string
    }

    record AliasType {
        fqn : string
        target_type : Type
    }

    record ProductType {
        tag : string
        fqn : string

        /**
         * Arguments from which the type is constructed.
         */
        args : list<TypeArg>
    }

    record SumType {
        tag : string
        fqn : string

        /**
         * Arguments from which the type is constructed.
         */
        args : list<TypeArg>
    }

    record FunType {
        fqn : string
        source_typeargs : list<TypeArg>
        return_typearg : TypeArg?
    }

    record TypeRef {
        fqn : string
    }

    record TypeFun {
        fqn : string
        type_params : list<string>
        type_expr : Type
    }

    record TypeApp {
        fun : Type
        args : list<Type>
    }

    /**
     * Type arguments a children of a type and constitutes elements like function parameters, 
     * record fields, tuple element types and even arguments in a type generic.
     */
    record TypeArg {
        name : string?
        argtype : Type
        optional : boolean
        default_value : any
        docs : string
    }
}

