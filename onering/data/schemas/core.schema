
/**
 * Onering representation of core typecube schemas.
 */
module onering.core {
    /**
     * Modules are the top level holders of either other modules or types.
     */
    record Module {
        fqn : string
        docs : string
        entries : list<ModuleEntry>
    }

    /**
     * A Module entry is either a type or another module.
     */
    union ModuleEntry {
        module : Module
        type : Type
        alias : TypeAlias
    }

    record TypeAlias {
        fqn : string
        targetType : Type
    }

    record Type {
        fqn : string
        docs : string
        value : TypeValue
    }

    union TypeValue {
        literalType : LiteralType
        productType : ProductType
        sumType : SumType
        funType : FunType
        typeRef : TypeRef
        typeFun : TypeFun
        typeApp : TypeApp
    }

    record LiteralType {
    }

    record ProductType {
        tag : string
        /**
         * Arguments from which the type is constructed.
         */
        args : list<TypeArg>
    }

    record SumType {
        tag : string

        /**
         * Arguments from which the type is constructed.
         */
        args : list<TypeArg>
    }

    record FunType {
        sourceTypeArgs : list<TypeArg>
        returnTypeArg : TypeArg?
    }

    record TypeRef { }

    record TypeFun {
        params : list<string>
        result : Type
    }

    record TypeApp {
        fun : Type
        args : list<Type>
    }

    /**
     * Type arguments a children of a type and constitutes elements like function parameters, 
     * record fields, tuple element types and even arguments in a type generic.
     */
    record TypeArg {
        name : string?
        argtype : Type
        optional : boolean
        defaultValue : any
        docs : string
    }
}

